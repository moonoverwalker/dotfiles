"-------------------------------------------------------------------------------
" neocomplete
"-------------------------------------------------------------------------------
" 起動時に有効にする
let g:neocomplete#enable_at_startup = 1
"スニペットファイルの置き場所
let g:neocomplete#snippets_dir = $HOME . '/.vim/bundle/neosnippet/autoload/neosnippet/snippets'

" キャッシュディレクトリの場所
if has('win32')
  let g:neocomplete#temporary_dir = $HOME . '/.neocon'
elseif has('macunix')
  let g:neocomplete#temporary_dir = '~/.neocon'
else
  let g:neocomplete#temporary_dir = '/tmp/.neocon'
endif

" 区切りの補完を有効化
let g:neocomplete#enable_underbar_completion = 1

" シンタックス補完を無効に
let g:neocomplete#plugin_disable = {
      \ 'syntax_complete' : 1,
      \ }

"ファイルタイプの関連付け
if !exists('g:neocomplete#same_filetype_lists')
  let g:neocomplete#same_filetype_lists = {}
endif
let g:neocomplete#same_filetype_lists['ctp'] = 'php'
let g:neocomplete#same_filetype_lists['erb'] = 'ruby'
let g:neocomplete#same_filetype_lists['twig'] = 'html'

" }}}

" neocomplete view {{{
" ポップアップメニューで表示される候補の数。
let g:neocomplete#max_list=5
" 自動補完を行う入力数を設定
let g:neocomplete#auto_completion_start_length = 3
" let g:neocomplete#min_syntax_length = 4
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_camel_case_completion = 0
let g:neocomplete#enable_underbar_completion = 0
" 1番目の候補を自動選択
let g:neocomplete#enable_auto_select = 1
" }}}

" neocomplete keybinding {{{
"改行で補完ウィンドウを閉じる
inoremap <expr><CR> neocomplete#smart_close_popup() . "\<CR>"
"tabで補完候補の選択を行う
inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"

"C-yで補完候補の確定
inoremap <expr><C-y> neocomplete#close_popup()
" 補完候補が表示されている場合は確定。そうでない場合は改行
inoremap <expr><Enter>  pumvisible() ? "\<C-y>" : "\<Enter>"
inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "<CR>"

"C-eで補完のキャンセルし、ウィンドウを閉じる。ポップアップが開いていないときはEndキー
inoremap <expr><C-e> pumvisible() ? neocomplete#cancel_popup() : "\<End>"
"C-gで補完を元に戻す
inoremap <expr><C-g> neocomplete#undo_completion()

"C-pで上キー
inoremap <C-p> <Up>
"補完候補の共通文字列を補完する(シェル補完のような動作)
inoremap <expr><C-l> neocomplete#complete_common_string()

" }}}


" neocomplete completion config {{{
"カーソルより後のキーワードパターンを認識。
"h|geとなっている状態(|はカーソル)で、hogeを補完したときに後ろのキーワードを認識してho|geと補完する機能。
"修正するときにかなり便利。
"g:neocomplete#next_keyword_patternsは分からないときはいじらないほうが良いです。
if !exists('g:neocomplete#next_keyword_patterns')
  let g:neocomplete#next_keyword_patterns = {}
endif

" Enable heavy omni completion. ruby用
if !exists('g:neocomplete#omni_patterns')
  let g:neocomplete#omni_patterns = {}
endif
let g:neocomplete#omni_patterns.ruby = '[^. *¥t]¥.¥w*¥|¥h¥w*::'
au FileType ruby setlocal omnifunc=rubycomplete#Complete

"補完するためのキーワードパターンを指定
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
"日本語を補完候補として取得しないようにする
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"twigはhtmlと同じに
let g:neocomplete#keyword_patterns['twig'] = '</\?\%([[:alnum:]_:-]\+\s*\)\?\%(/\?>\)\?\|&\h\%(\w*;\)\?\|\h[[:alnum:]_-]*="\%([^"]*"\?\)\?\|\h[[:alnum:]_:-]*'

"関数を補完するための区切り文字パターン
if !exists('g:neocomplete#delimiter_patterns')
  let g:neocomplete#delimiter_patterns = {}
endif
let g:neocomplete#delimiter_patterns['php'] = ['->', '::', '\']
let g:neocomplete#delimiter_patterns['ruby'] = ['.', '::']

"ディクショナリ補完
"ファイルタイプごとの辞書ファイルの場所
let g:neocomplete#dictionary_filetype_lists = {
      \ 'default' : '',
      \ 'php' : $HOME . '/.vim/dictionary/php.dict',
      \ 'ctp' : $HOME . '/.vim/dictionary/php.dict',
      \ }

